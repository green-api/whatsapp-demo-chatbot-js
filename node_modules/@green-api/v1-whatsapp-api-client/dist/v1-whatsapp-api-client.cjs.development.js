'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var axios = _interopDefault(require('axios'));

const assertNumeric = (val, errorMsg) => {
  if (val && isNumeric(val)) {
    return val;
  } else {
    throw new Error(errorMsg);
  }
};
const assertApiToken = val => {
  if (!val) {
    throw new Error("auth token not defined");
  } else {
    return val;
  }
};
const assertNotNull = (val, errorMsg) => {
  if (val) {
    return val;
  } else {
    const err = new Error(errorMsg);
    throw err;
  }
};
const assertObjectNotEmpty = (obj, errorMsg) => {
  if (isObjectEmpty(obj)) {
    const err = new Error(errorMsg);
    throw err;
  } else {
    return obj;
  }
};
const isObjectEmpty = obj => {
  return Object.keys(obj).length === 0 && obj.constructor === Object;
};
const assertPhone = val => {
  return assertNumeric(val, 'phone number has incorect format');
};

function isNumeric(value) {
  return /^-{0,1}\d+$/.test(value);
}

const DEFAULT_OPTIONS = {
  apiRoot: 'https://api.green-api.com/v1',
  mediaRoot: 'https://media.green-api.com/v1'
};
class Api {
  constructor(token, options) {
    this.token = token;
    this.DEFAULT_AXIOS_CFG = {
      headers: {
        'Authorization': 'Bearer ' + this.token
      }
    };
    this.options = { ...DEFAULT_OPTIONS,
      ...options
    };
    assertApiToken(token);
  }

  async get(url) {
    const response = await axios.get(`${this.options.apiRoot}/${url}`, this.DEFAULT_AXIOS_CFG);

    try {
      return response.data;
    } catch (ex) {
      this.processError(ex);
    }
  }

  async delete(url) {
    const response = await axios.delete(`${this.options.apiRoot}/${url}`, this.DEFAULT_AXIOS_CFG);

    try {
      return response.data;
    } catch (ex) {
      this.processError(ex);
    }
  }

  async post(url, data) {
    try {
      const response = await axios.post(`${this.options.apiRoot}/${url}`, data, this.DEFAULT_AXIOS_CFG);
      return response.data;
    } catch (ex) {
      this.processError(ex);
    }
  }

  async postMedia(url, data, ext) {
    try {
      const config = {
        method: 'post',
        url: `${this.options.mediaRoot}/${url}`,
        headers: {
          'X-Gr-File-Extension': ext,
          'Authorization': this.DEFAULT_AXIOS_CFG.headers['Authorization'],
          'Content-Type': 'text/plain'
        },
        data: data
      };
      const response = await axios(config);
      return response.data;
    } catch (ex) {
      this.processError(ex);
    }
  }

  processError(ex) {
    if (ex.isAxiosError && ex.response && ex.response.data) {
      throw new Error(JSON.stringify(ex.response.data));
    } else {
      throw ex;
    }
  }

}

var V1;

(function (V1) {
  let RecipientTypes;

  (function (RecipientTypes) {
    RecipientTypes["Individual"] = "individual";
    RecipientTypes["Group"] = "group";
  })(RecipientTypes = V1.RecipientTypes || (V1.RecipientTypes = {}));
})(V1 || (V1 = {}));

class Messages {
  constructor(api) {
    this.api = api;
    this.url = 'messages';
  }
  /**
   * Send text message to private chat
   * @param phoneNumber phone number, for example '79001234567'
   * @param text // text message to send
   */


  async sendTextMessage(phoneNumber, text) {
    assertPhone(phoneNumber);
    assertNotNull(text, 'parameter text must not be empty');
    return this.api.post(this.url, {
      to: phoneNumber,
      type: "text",
      text: {
        body: text
      }
    });
  }
  /**
   * Send text message to group chat
   * @param chatId Groupd id in format like "00000000000-XXXXXXXXXX". For example : "79001234567-1581234048"
   * @param text // text message to send
   */


  async sendTextMessageToGroup(chatId, text) {
    assertNotNull(chatId, 'parameter chatId must not be empty');
    assertNotNull(text, 'parameter text must not be empty');
    return this.api.post(this.url, {
      recipient_type: "group",
      to: chatId,
      type: "text",
      text: {
        body: text
      }
    });
  }
  /**
   * Send image. Before image have to be uploaded to server using method media.uploadMedia()
   * @param phoneNumber phone number, for example '79001234567'
   * @param mediaId id obtained from uploading image via method media.uploadMedia()
   * @param caption title under image in WhatsApp
   * @param recipient_type chat type. Can be individual or group
   */


  async sendImageById(phoneNumber, mediaId, caption, recipient_type = V1.RecipientTypes.Individual) {
    assertPhone(phoneNumber);
    assertNotNull(mediaId, 'parameter mediaId must not be empty');
    return this.api.post(this.url, {
      recipient_type: recipient_type,
      to: phoneNumber,
      type: "image",
      image: {
        id: mediaId,
        caption: caption
      }
    });
  }
  /**
   * Send image by any url accessible from public zone of Internet
   * @param phoneNumber phone number, for example '79001234567'
   * @param link url
   * @param caption title under image in WhatsApp
   * @param recipient_type chat type. Can be individual or group
   */


  async sendImageByLink(phoneNumber, link, caption, recipient_type = V1.RecipientTypes.Individual) {
    assertPhone(phoneNumber);
    assertNotNull(link, 'parameter link must not be empty');
    return this.api.post(this.url, {
      recipient_type: recipient_type,
      to: phoneNumber,
      type: "image",
      image: {
        link: link,
        caption: caption
      }
    });
  }
  /**
   * Send video. Before video have to be uploaded to server using method media.uploadMedia()
   * @param phoneNumber phone number, for example '79001234567'
   * @param mediaId id obtained from uploading video via method media.uploadMedia()
   * @param recipient_type chat type. Can be individual or group
   */


  async sendVideoById(phoneNumber, mediaId, recipient_type = V1.RecipientTypes.Individual) {
    assertPhone(phoneNumber);
    assertNotNull(mediaId, 'parameter mediaId must not be empty');
    return this.api.post(this.url, {
      recipient_type: recipient_type,
      to: phoneNumber,
      type: "video",
      video: {
        id: mediaId
      }
    });
  }
  /**
   * Send video by any url accessible from public zone of Internet
   * @param phoneNumber phone number, for example '79001234567'
   * @param link url
   * @param caption title under video in WhatsApp
   * @param recipient_type chat type. Can be individual or group
   */


  async sendVideoByLink(phoneNumber, link, recipient_type = V1.RecipientTypes.Individual) {
    assertPhone(phoneNumber);
    assertNotNull(link, 'parameter link must not be empty');
    return this.api.post(this.url, {
      recipient_type: recipient_type,
      to: phoneNumber,
      type: "video",
      video: {
        link: link
      }
    });
  }
  /**
   * Send audio. Before audio have to be uploaded to server using method media.uploadMedia()
   * @param phoneNumber phone number, for example '79001234567'
   * @param mediaId id obtained from uploading audio via method media.uploadMedia()
   * @param recipient_type chat type. Can be individual or group
   */


  async sendAudioById(phoneNumber, mediaId, recipient_type = V1.RecipientTypes.Individual) {
    assertPhone(phoneNumber);
    assertNotNull(mediaId, 'parameter mediaId must not be empty');
    return this.api.post(this.url, {
      recipient_type: recipient_type,
      to: phoneNumber,
      type: "audio",
      audio: {
        id: mediaId
      }
    });
  }
  /**
   * Send audio by any url accessible from public zone of Internet
   * @param phoneNumber phone number, for example '79001234567'
   * @param link url
   * @param caption title under audio in WhatsApp
   * @param recipient_type chat type. Can be individual or group
   */


  async sendAudioByLink(phoneNumber, link, recipient_type = V1.RecipientTypes.Individual) {
    assertPhone(phoneNumber);
    assertNotNull(link, 'parameter link must not be empty');
    return this.api.post(this.url, {
      recipient_type: recipient_type,
      to: phoneNumber,
      type: "audio",
      audio: {
        link: link
      }
    });
  }
  /**
   * Send document. Before document have to be uploaded to server using method media.uploadMedia()
   * @param phoneNumber phone number, for example '79001234567'
   * @param mediaId id obtained from uploading document via method media.uploadMedia()
   * @param recipient_type chat type. Can be individual or group
   */


  async sendDocumentById(phoneNumber, mediaId, recipient_type = V1.RecipientTypes.Individual) {
    assertPhone(phoneNumber);
    assertNotNull(mediaId, 'parameter mediaId must not be empty');
    return this.api.post(this.url, {
      recipient_type: recipient_type,
      to: phoneNumber,
      type: "document",
      document: {
        id: mediaId
      }
    });
  }
  /**
   * Send document by any url accessible from public zone of Internet
   * @param phoneNumber phone number, for example '79001234567'
   * @param link url
   * @param caption title under document in WhatsApp
   * @param recipient_type chat type. Can be individual or group
   */


  async sendDocumentByLink(phoneNumber, link, recipient_type = V1.RecipientTypes.Individual) {
    assertPhone(phoneNumber);
    assertNotNull(link, 'parameter link must not be empty');
    return this.api.post(this.url, {
      recipient_type: recipient_type,
      to: phoneNumber,
      type: "document",
      document: {
        link: link
      }
    });
  }

}

class Media {
  constructor(api) {
    this.api = api;
    this.url = 'media';
  }
  /**
   * Upload binary data (images, documents etc) to the server. After uploading you can send media to WhatsApp using id of the uploaded data
   * @param data binary data to upload
   * @param fileExtension extension of upladed data that will be assign to media message in WhatsApp.
   */


  async uploadMedia(data, fileExtension) {
    assertNotNull(data, 'parameter data must not be empty');
    assertNotNull(fileExtension, 'parameter fileExtension must not be empty');

    if (fileExtension.startsWith('.')) {
      fileExtension = fileExtension.slice(1);
    }

    const response = await this.api.postMedia(this.url, data, fileExtension);
    return response.media[0].id;
  }

}

class Broadcasts {
  constructor(api) {
    this.api = api;
    this.url = 'broadcast';
  }
  /**
   * Send broadcast message to several phone numbers. There must be at least 2 receivers
   * @param phoneNumbers array of phones, for example ['79001234567', '79001234568']
   * @param text text message to send
   * @param regPeriod filter by registration period for phones. Something like {"from": "2020-01-01 00:00:00", "to": "2020-01-31 23:59:59"}
   * @param activePeriod filter for activity period for phones. Something like {"from": "2020-01-01 00:00:00", "to": "2020-01-31 23:59:59"}
   * @param startAt date when to start broadcasting. If empty to begin immediately. Format like "2020-01-01 00:00:00"
   */


  async sendBroadcastTextMessage(phoneNumbers, text, regPeriod, activePeriod, startAt) {
    assertObjectNotEmpty(phoneNumbers, 'parameter phoneNumbers must not be empty');
    assertNotNull(text, 'parameter text must not be empty');
    const body = {
      name: "Broadcast from Green-API",
      to: this.toWaIds(phoneNumbers),
      type: "text",
      text: {
        body: text
      }
    };

    if (regPeriod) {
      body.period = regPeriod;
    }

    if (activePeriod) {
      body.active = activePeriod;
    }

    if (startAt) {
      body.startAt = startAt;
    }

    return this.api.post(this.url, body);
  }
  /**
   * Send broadcast image to several phone numbers. There must be at least 2 receivers
   * @param phoneNumbers array of phones, for example ['79001234567', '79001234568']
   * @param mediaId id obtained from uploading image via method media.uploadMedia()
   * @param caption title under image in WhatsApp
   * @param regPeriod filter by registration period for phones. Something like {"from": "2020-01-01 00:00:00", "to": "2020-01-31 23:59:59"}
   * @param activePeriod filter for activity period for phones. Something like {"from": "2020-01-01 00:00:00", "to": "2020-01-31 23:59:59"}
   * @param startAt date when to start broadcasting. If empty to begin immediately. Format like "2020-01-01 00:00:00"
   */


  async sendBroadcastImageById(phoneNumbers, mediaId, caption, regPeriod, activePeriod, startAt) {
    assertObjectNotEmpty(phoneNumbers, 'parameter phoneNumbers must not be empty');
    assertNotNull(mediaId, 'parameter mediaId must not be empty');
    const body = {
      name: "Broadcast from Green-API",
      to: this.toWaIds(phoneNumbers),
      type: "image",
      image: {
        id: mediaId,
        caption: caption
      }
    };

    if (regPeriod) {
      body.period = regPeriod;
    }

    if (activePeriod) {
      body.active = activePeriod;
    }

    if (startAt) {
      body.startAt = startAt;
    }

    return this.api.post(this.url, body);
  }
  /**
   * Send broadcast image to several phone numbers. There must be at least 2 receivers
   * @param phoneNumbers array of phones, for example ['79001234567', '79001234568']
   * @param link url
   * @param caption title under image in WhatsApp
   * @param regPeriod filter by registration period for phones. Something like {"from": "2020-01-01 00:00:00", "to": "2020-01-31 23:59:59"}
   * @param activePeriod filter for activity period for phones. Something like {"from": "2020-01-01 00:00:00", "to": "2020-01-31 23:59:59"}
   * @param startAt date when to start broadcasting. If empty to begin immediately. Format like "2020-01-01 00:00:00"
   */


  async sendBroadcastImageByLink(phoneNumbers, link, caption, regPeriod, activePeriod, startAt) {
    assertObjectNotEmpty(phoneNumbers, 'parameter phoneNumbers must not be empty');
    assertNotNull(link, 'parameter mediaId must not be empty');
    const body = {
      name: "Broadcast from Green-API",
      to: this.toWaIds(phoneNumbers),
      type: "image",
      image: {
        link: link,
        caption: caption
      }
    };

    if (regPeriod) {
      body.period = regPeriod;
    }

    if (activePeriod) {
      body.active = activePeriod;
    }

    if (startAt) {
      body.startAt = startAt;
    }

    return this.api.post(this.url, body);
  }
  /**
   * Send broadcast video to several phone numbers. There must be at least 2 receivers
   * @param phoneNumbers array of phones, for example ['79001234567', '79001234568']
   * @param mediaId id obtained from uploading video via method media.uploadMedia()
   * @param caption title under video in WhatsApp
   * @param regPeriod filter by registration period for phones. Something like {"from": "2020-01-01 00:00:00", "to": "2020-01-31 23:59:59"}
   * @param activePeriod filter for activity period for phones. Something like {"from": "2020-01-01 00:00:00", "to": "2020-01-31 23:59:59"}
   * @param startAt date when to start broadcasting. If empty to begin immediately. Format like "2020-01-01 00:00:00"
   */


  async sendBroadcastVideoById(phoneNumbers, mediaId, regPeriod, activePeriod, startAt) {
    assertObjectNotEmpty(phoneNumbers, 'parameter phoneNumbers must not be empty');
    assertNotNull(mediaId, 'parameter mediaId must not be empty');
    const body = {
      name: "Broadcast from Green-API",
      to: this.toWaIds(phoneNumbers),
      type: "video",
      video: {
        id: mediaId
      }
    };

    if (regPeriod) {
      body.period = regPeriod;
    }

    if (activePeriod) {
      body.active = activePeriod;
    }

    if (startAt) {
      body.startAt = startAt;
    }

    return this.api.post(this.url, body);
  }
  /**
   * Send broadcast video to several phone numbers. There must be at least 2 receivers
   * @param phoneNumbers array of phones, for example ['79001234567', '79001234568']
   * @param link url
   * @param caption title under video in WhatsApp
   * @param regPeriod filter by registration period for phones. Something like {"from": "2020-01-01 00:00:00", "to": "2020-01-31 23:59:59"}
   * @param activePeriod filter for activity period for phones. Something like {"from": "2020-01-01 00:00:00", "to": "2020-01-31 23:59:59"}
   * @param startAt date when to start broadcasting. If empty to begin immediately. Format like "2020-01-01 00:00:00"
   */


  async sendBroadcastVideoByLink(phoneNumbers, link, regPeriod, activePeriod, startAt) {
    assertObjectNotEmpty(phoneNumbers, 'parameter phoneNumbers must not be empty');
    assertNotNull(link, 'parameter mediaId must not be empty');
    const body = {
      name: "Broadcast from Green-API",
      to: this.toWaIds(phoneNumbers),
      type: "video",
      video: {
        link: link
      }
    };

    if (regPeriod) {
      body.period = regPeriod;
    }

    if (activePeriod) {
      body.active = activePeriod;
    }

    if (startAt) {
      body.startAt = startAt;
    }

    return this.api.post(this.url, body);
  }
  /**
   * Send broadcast document to several phone numbers. There must be at least 2 receivers
   * @param phoneNumbers array of phones, for example ['79001234567', '79001234568']
   * @param mediaId id obtained from uploading document via method media.uploadMedia()
   * @param caption title under document in WhatsApp
   * @param regPeriod filter by registration period for phones. Something like {"from": "2020-01-01 00:00:00", "to": "2020-01-31 23:59:59"}
   * @param activePeriod filter for activity period for phones. Something like {"from": "2020-01-01 00:00:00", "to": "2020-01-31 23:59:59"}
   * @param startAt date when to start broadcasting. If empty to begin immediately. Format like "2020-01-01 00:00:00"
   */


  async sendBroadcastDocumentById(phoneNumbers, mediaId, regPeriod, activePeriod, startAt) {
    assertObjectNotEmpty(phoneNumbers, 'parameter phoneNumbers must not be empty');
    assertNotNull(mediaId, 'parameter mediaId must not be empty');
    const body = {
      name: "Broadcast from Green-API",
      to: this.toWaIds(phoneNumbers),
      type: "document",
      document: {
        id: mediaId
      }
    };

    if (regPeriod) {
      body.period = regPeriod;
    }

    if (activePeriod) {
      body.active = activePeriod;
    }

    if (startAt) {
      body.startAt = startAt;
    }

    return this.api.post(this.url, body);
  }
  /**
   * Send broadcast document to several phone numbers. There must be at least 2 receivers
   * @param phoneNumbers array of phones, for example ['79001234567', '79001234568']
   * @param link url
   * @param caption title under document in WhatsApp
   * @param regPeriod filter by registration period for phones. Something like {"from": "2020-01-01 00:00:00", "to": "2020-01-31 23:59:59"}
   * @param activePeriod filter for activity period for phones. Something like {"from": "2020-01-01 00:00:00", "to": "2020-01-31 23:59:59"}
   * @param startAt date when to start broadcasting. If empty to begin immediately. Format like "2020-01-01 00:00:00"
   */


  async sendBroadcastDocumentByLink(phoneNumbers, link, regPeriod, activePeriod, startAt) {
    assertObjectNotEmpty(phoneNumbers, 'parameter phoneNumbers must not be empty');
    assertNotNull(link, 'parameter mediaId must not be empty');
    const body = {
      name: "Broadcast from Green-API",
      to: this.toWaIds(phoneNumbers),
      type: "document",
      document: {
        link: link
      }
    };

    if (regPeriod) {
      body.period = regPeriod;
    }

    if (activePeriod) {
      body.active = activePeriod;
    }

    if (startAt) {
      body.startAt = startAt;
    }

    return this.api.post(this.url, body);
  }
  /**
   * Send broadcast audio to several phone numbers. There must be at least 2 receivers
   * @param phoneNumbers array of phones, for example ['79001234567', '79001234568']
   * @param mediaId id obtained from uploading audio via method media.uploadMedia()
   * @param caption title under audio in WhatsApp
   * @param regPeriod filter by registration period for phones. Something like {"from": "2020-01-01 00:00:00", "to": "2020-01-31 23:59:59"}
   * @param activePeriod filter for activity period for phones. Something like {"from": "2020-01-01 00:00:00", "to": "2020-01-31 23:59:59"}
   * @param startAt date when to start broadcasting. If empty to begin immediately. Format like "2020-01-01 00:00:00"
   */


  async sendBroadcastAudioById(phoneNumbers, mediaId, regPeriod, activePeriod, startAt) {
    assertObjectNotEmpty(phoneNumbers, 'parameter phoneNumbers must not be empty');
    assertNotNull(mediaId, 'parameter mediaId must not be empty');
    const body = {
      name: "Broadcast from Green-API",
      to: this.toWaIds(phoneNumbers),
      type: "audio",
      audio: {
        id: mediaId
      }
    };

    if (regPeriod) {
      body.period = regPeriod;
    }

    if (activePeriod) {
      body.active = activePeriod;
    }

    if (startAt) {
      body.startAt = startAt;
    }

    return this.api.post(this.url, body);
  }
  /**
   * Send broadcast audio to several phone numbers. There must be at least 2 receivers
   * @param phoneNumbers array of phones, for example ['79001234567', '79001234568']
   * @param link url
   * @param caption title under audio in WhatsApp
   * @param regPeriod filter by registration period for phones. Something like {"from": "2020-01-01 00:00:00", "to": "2020-01-31 23:59:59"}
   * @param activePeriod filter for activity period for phones. Something like {"from": "2020-01-01 00:00:00", "to": "2020-01-31 23:59:59"}
   * @param startAt date when to start broadcasting. If empty to begin immediately. Format like "2020-01-01 00:00:00"
   */


  async sendBroadcastAudioByLink(phoneNumbers, link, regPeriod, activePeriod, startAt) {
    assertObjectNotEmpty(phoneNumbers, 'parameter phoneNumbers must not be empty');
    assertNotNull(link, 'parameter mediaId must not be empty');
    const body = {
      name: "Broadcast from Green-API",
      to: this.toWaIds(phoneNumbers),
      type: "audio",
      audio: {
        link: link
      }
    };

    if (regPeriod) {
      body.period = regPeriod;
    }

    if (activePeriod) {
      body.active = activePeriod;
    }

    if (startAt) {
      body.startAt = startAt;
    }

    return this.api.post(this.url, body);
  }

  toWaIds(phoneNumbers) {
    if (phoneNumbers.length < 2) {
      throw new Error('There are not enough phones to send broadcast. Must be at least 2');
    }

    return phoneNumbers.map(phone => {
      return {
        wa_id: phone
      };
    });
  }

}

class Notifications {
  constructor(api) {
    this.api = api;
    this.url = 'notifications';
  }
  /**
   * Notifications include data about incoming messages, statues, sent messges.
   * After receving notification it have to be deleted with the method deleteNotification() in order to receive the next notification
   * Inner implementation uses long polling. Every method invokes loop that waits 20 seconds for the next message.
   * If no messages arrive then the loop ends with the empty response.
   */


  async receiveNotification() {
    return this.api.get(this.url);
  }
  /**
   * Delete notification for remote server using receiptId
   * @param receiptId message id get coming from notification
   */


  async deleteNotification(receiptId) {
    return this.api.delete(`${this.url}/${receiptId}`);
  }

}

class WhatsAppApi {
  constructor(token, options) {
    const api = new Api(token, options);
    this.messages = new Messages(api);
    this.media = new Media(api);
    this.broadcasts = new Broadcasts(api);
    this.notifications = new Notifications(api);
  }

}
module.exports = /*#__PURE__*/Object.assign(WhatsAppApi, {
  default: WhatsAppApi
});

exports.default = WhatsAppApi;
//# sourceMappingURL=v1-whatsapp-api-client.cjs.development.js.map
