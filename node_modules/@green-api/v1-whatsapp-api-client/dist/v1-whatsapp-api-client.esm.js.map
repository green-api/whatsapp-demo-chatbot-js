{"version":3,"file":"v1-whatsapp-api-client.esm.js","sources":["../src/Validations.ts","../src/api.ts","../src/v1-types.ts","../src/messages.ts","../src/media.ts","../src/broadcasts.ts","../src/notifications.ts","../src/index.ts"],"sourcesContent":["export const assertNumber = (val : any, errorMsg: string) => {\r\n    if (val && isNumeric(val)) {\r\n        return Number.parseInt(val)\r\n    } else {\r\n        throw new Error(errorMsg)\r\n    }\r\n}\r\n\r\nexport const assertNumeric = (val : any, errorMsg: string) => {\r\n    if (val && isNumeric(val)) {\r\n        return val\r\n    } else {\r\n        throw new Error(errorMsg)\r\n    }\r\n}\r\n\r\nexport const assertApiToken = (val : any) => {\r\n    if (!val) {\r\n        throw new Error(\"auth token not defined\")\r\n    } else {\r\n        return val\r\n    }\r\n}\r\n\r\nexport const assertNotNull = (val : any, errorMsg: string) => {\r\n    if (val) {\r\n        return val\r\n    } else {\r\n        const err = new Error(errorMsg)\r\n        throw err;\r\n    }\r\n}\r\n\r\nexport const assertObjectNotEmpty = (obj: Object, errorMsg: string) => {\r\n    if (isObjectEmpty(obj)) {\r\n        const err = new Error(errorMsg)\r\n        throw err;\r\n    } else {\r\n        return obj\r\n    }\r\n}\r\n\r\nexport const isObjectEmpty = (obj: Object) => {\r\n    return (Object.keys(obj).length === 0 && obj.constructor === Object)\r\n}\r\n\r\nexport const assertPhone = (val : string) => {\r\n    return assertNumeric(val, 'phone number has incorect format')\r\n}\r\n\r\n\r\nfunction isNumeric(value: any) {\r\n    return /^-{0,1}\\d+$/.test(value);\r\n}\r\n\r\n","\r\nimport axios, { AxiosRequestConfig } from 'axios'\r\nimport { assertApiToken } from './Validations';\r\n\r\nexport interface Options {\r\n    apiRoot: string,\r\n    mediaRoot: string,\r\n} \r\n\r\nconst DEFAULT_OPTIONS = {\r\n    apiRoot: 'https://api.green-api.com/v1',\r\n    mediaRoot: 'https://media.green-api.com/v1'\r\n}\r\n\r\nexport default class Api {\r\n\r\n    private readonly options: Options\r\n    private DEFAULT_AXIOS_CFG : AxiosRequestConfig =  {\r\n        headers: {\r\n            'Authorization': 'Bearer ' + this.token\r\n        }\r\n    }\r\n    \r\n    constructor(readonly token : string,  options?: Partial<Options>) {\r\n        this.options = {\r\n            ...DEFAULT_OPTIONS,\r\n            ...options,\r\n        }\r\n        assertApiToken(token)\r\n    }\r\n\r\n    async get(url: string) : Promise<any> {\r\n        const response = await axios.get(`${this.options.apiRoot}/${url}`, this.DEFAULT_AXIOS_CFG)\r\n        try {\r\n            return response.data\r\n        } catch (ex) {\r\n            this.processError(ex)\r\n        }\r\n    } \r\n\r\n    async delete(url: string) : Promise<any> {\r\n        const response = await axios.delete(`${this.options.apiRoot}/${url}`, this.DEFAULT_AXIOS_CFG)\r\n        try {\r\n            return response.data\r\n        } catch (ex) {\r\n            this.processError(ex)\r\n        }\r\n    } \r\n\r\n    async post(url: string, data : any) : Promise<any> {\r\n        try {\r\n            const response = await axios.post(`${this.options.apiRoot}/${url}`, data, this.DEFAULT_AXIOS_CFG)\r\n            return response.data\r\n        } catch(ex) {\r\n            this.processError(ex)\r\n        }\r\n    }\r\n\r\n    async postMedia(url: string, data : Buffer, ext: string) : Promise<any> {\r\n        try {\r\n            const config : AxiosRequestConfig = {\r\n                method: 'post',\r\n                url: `${this.options.mediaRoot}/${url}`,\r\n                headers: { \r\n                    'X-Gr-File-Extension': ext, \r\n                    'Authorization': this.DEFAULT_AXIOS_CFG.headers['Authorization'], \r\n                    'Content-Type': 'text/plain'\r\n                },\r\n                data : data\r\n            };\r\n            const response = await axios(config)\r\n            return response.data;\r\n        } catch (ex) {\r\n            this.processError(ex)\r\n        }\r\n    }\r\n\r\n    private processError(ex: any) {\r\n        if (ex.isAxiosError && ex.response && ex.response.data) {\r\n            throw new Error(JSON.stringify(ex.response.data))\r\n        } else {\r\n            throw ex\r\n        }\r\n    }\r\n}","\r\nexport namespace V1 {\r\n    export interface MessageResponse {\r\n        messages: [\r\n            {\r\n                id: string\r\n            }\r\n        ],\r\n        meta: Meta\r\n    }\r\n    export interface MediaResponse {\r\n        media: [\r\n            {\r\n                id: string\r\n            }\r\n        ],\r\n        meta: Meta\r\n    }\r\n    export enum RecipientTypes {\r\n        Individual = 'individual',\r\n        Group = 'group'\r\n    }\r\n\r\n    export interface NotificationResponse {\r\n        receipt: number,\r\n        notifications: InboundMessage[]\r\n    }\r\n\r\n}\r\n\r\ninterface Meta {\r\n    \"api_status\": \"stable\",\r\n    \"version\": \"2.0.1\"\r\n}\r\n\r\ninterface NotificationEntitiy {\r\n    type: string\r\n    account: Account,\r\n}\r\n\r\ninterface InboundMessage extends NotificationEntitiy {\r\n    type: \"inbound_message\",\r\n    messages: MessageEntity[],\r\n    contacts: [\r\n        {\r\n            profile: {\r\n                name: string\r\n            },\r\n            wa_id: string\r\n        }\r\n    ]\r\n}\r\n\r\ninterface Account {\r\n    id: string,\r\n    wa_id: string\r\n}\r\n\r\ninterface MessageEntity {\r\n    from: string\r\n    id: string\r\n    timestamp: string\r\n    type: \"text | image | video | voice | document | contacts | location\",\r\n    text?: Text,\r\n    image?: Image,\r\n    video?: Video,\r\n    voice?: Voice,\r\n    document?: Document,\r\n    contacts?: Contacts,\r\n    location?: Location,\r\n}\r\n\r\ninterface Text extends MessageEntity {\r\n    body: string\r\n}\r\n\r\ninterface Image extends MessageEntity {\r\n    id: string\r\n    mime_type: string\r\n    file_extension: string,\r\n    caption: string\r\n}\r\n\r\ninterface Video extends MessageEntity {\r\n    id: string\r\n    mime_type: string,\r\n    file_extension: string,\r\n    caption: string\r\n}\r\n\r\ninterface Voice extends MessageEntity {\r\n    id: string,\r\n    mime_type: string,\r\n    file_extension: string\r\n}\r\n\r\ninterface Document extends MessageEntity {\r\n    id: string,\r\n    mime_type: string,\r\n    file_extension: string,\r\n    filename: string\r\n}\r\n\r\ninterface Contacts extends MessageEntity {\r\n    vcard: string\r\n}\r\n\r\ninterface Location extends MessageEntity {\r\n    link: string\r\n}\r\n","import Api from './api';\r\nimport { assertNotNull, assertPhone } from './Validations';\r\nimport {V1} from './v1-types'\r\n\r\nexport class Messages {\r\n\r\n    private readonly url = 'messages' \r\n\r\n    constructor(private readonly api : Api) {}\r\n\r\n    /**\r\n     * Send text message to private chat\r\n     * @param phoneNumber phone number, for example '79001234567'\r\n     * @param text // text message to send \r\n     */\r\n    async sendTextMessage(phoneNumber: string, text : string) : Promise<V1.MessageResponse> {\r\n        assertPhone(phoneNumber)\r\n        assertNotNull(text, 'parameter text must not be empty')\r\n        return this.api.post(this.url, {\r\n            to: phoneNumber,\r\n            type: \"text\",    \r\n            text: {\r\n                body: text\r\n            }    \r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Send text message to group chat \r\n     * @param chatId Groupd id in format like \"00000000000-XXXXXXXXXX\". For example : \"79001234567-1581234048\"\r\n     * @param text // text message to send \r\n     */\r\n    async sendTextMessageToGroup(chatId: string, text : string) : Promise<V1.MessageResponse> {\r\n        assertNotNull(chatId, 'parameter chatId must not be empty')\r\n        assertNotNull(text, 'parameter text must not be empty')\r\n        return this.api.post(this.url, {\r\n            recipient_type: \"group\",\r\n            to: chatId,\r\n            type:\"text\",    \r\n            text: {\r\n                body: text\r\n            }    \r\n        })\r\n    }\r\n\r\n    /**\r\n     * Send image. Before image have to be uploaded to server using method media.uploadMedia() \r\n     * @param phoneNumber phone number, for example '79001234567'\r\n     * @param mediaId id obtained from uploading image via method media.uploadMedia() \r\n     * @param caption title under image in WhatsApp\r\n     * @param recipient_type chat type. Can be individual or group\r\n     */\r\n    async sendImageById(phoneNumber: string, mediaId : string, caption? : string, recipient_type : V1.RecipientTypes = V1.RecipientTypes.Individual) : Promise<V1.MessageResponse> {\r\n        assertPhone(phoneNumber)\r\n        assertNotNull(mediaId, 'parameter mediaId must not be empty')\r\n        return this.api.post(this.url, {\r\n            recipient_type: recipient_type,\r\n            to: phoneNumber,\r\n            type: \"image\",\r\n            image: {\r\n                id: mediaId,\r\n                caption: caption\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Send image by any url accessible from public zone of Internet\r\n     * @param phoneNumber phone number, for example '79001234567'\r\n     * @param link url\r\n     * @param caption title under image in WhatsApp\r\n     * @param recipient_type chat type. Can be individual or group\r\n     */\r\n    async sendImageByLink(phoneNumber: string, link : string, caption? : string, recipient_type : V1.RecipientTypes = V1.RecipientTypes.Individual) : Promise<V1.MessageResponse> {\r\n        assertPhone(phoneNumber)\r\n        assertNotNull(link, 'parameter link must not be empty')\r\n        return this.api.post(this.url, {\r\n            recipient_type: recipient_type,\r\n            to: phoneNumber,\r\n            type: \"image\",\r\n            image: {\r\n                link: link,\r\n                caption: caption\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Send video. Before video have to be uploaded to server using method media.uploadMedia() \r\n     * @param phoneNumber phone number, for example '79001234567'\r\n     * @param mediaId id obtained from uploading video via method media.uploadMedia() \r\n     * @param recipient_type chat type. Can be individual or group\r\n     */\r\n    async sendVideoById(phoneNumber: string, mediaId : string, recipient_type : V1.RecipientTypes = V1.RecipientTypes.Individual) : Promise<V1.MessageResponse> {\r\n        assertPhone(phoneNumber)\r\n        assertNotNull(mediaId, 'parameter mediaId must not be empty')\r\n        return this.api.post(this.url, {\r\n            recipient_type: recipient_type,\r\n            to: phoneNumber,\r\n            type: \"video\",\r\n            video: {\r\n                id: mediaId,\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Send video by any url accessible from public zone of Internet\r\n     * @param phoneNumber phone number, for example '79001234567'\r\n     * @param link url\r\n     * @param caption title under video in WhatsApp\r\n     * @param recipient_type chat type. Can be individual or group\r\n     */\r\n    async sendVideoByLink(phoneNumber: string, link : string, recipient_type : V1.RecipientTypes = V1.RecipientTypes.Individual) : Promise<V1.MessageResponse> {\r\n        assertPhone(phoneNumber)\r\n        assertNotNull(link, 'parameter link must not be empty')\r\n        return this.api.post(this.url, {\r\n            recipient_type: recipient_type,\r\n            to: phoneNumber,\r\n            type: \"video\",\r\n            video: {\r\n                link: link,\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Send audio. Before audio have to be uploaded to server using method media.uploadMedia() \r\n     * @param phoneNumber phone number, for example '79001234567'\r\n     * @param mediaId id obtained from uploading audio via method media.uploadMedia() \r\n     * @param recipient_type chat type. Can be individual or group\r\n     */\r\n    async sendAudioById(phoneNumber: string, mediaId : string, recipient_type : V1.RecipientTypes = V1.RecipientTypes.Individual) : Promise<V1.MessageResponse> {\r\n        assertPhone(phoneNumber)\r\n        assertNotNull(mediaId, 'parameter mediaId must not be empty')\r\n        return this.api.post(this.url, {\r\n            recipient_type: recipient_type,\r\n            to: phoneNumber,\r\n            type: \"audio\",\r\n            audio: {\r\n                id: mediaId,\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Send audio by any url accessible from public zone of Internet\r\n     * @param phoneNumber phone number, for example '79001234567'\r\n     * @param link url\r\n     * @param caption title under audio in WhatsApp\r\n     * @param recipient_type chat type. Can be individual or group\r\n     */\r\n    async sendAudioByLink(phoneNumber: string, link : string, recipient_type : V1.RecipientTypes = V1.RecipientTypes.Individual) : Promise<V1.MessageResponse> {\r\n        assertPhone(phoneNumber)\r\n        assertNotNull(link, 'parameter link must not be empty')\r\n        return this.api.post(this.url, {\r\n            recipient_type: recipient_type,\r\n            to: phoneNumber,\r\n            type: \"audio\",\r\n            audio: {\r\n                link: link,\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Send document. Before document have to be uploaded to server using method media.uploadMedia() \r\n     * @param phoneNumber phone number, for example '79001234567'\r\n     * @param mediaId id obtained from uploading document via method media.uploadMedia() \r\n     * @param recipient_type chat type. Can be individual or group\r\n     */\r\n    async sendDocumentById(phoneNumber: string, mediaId : string, recipient_type : V1.RecipientTypes = V1.RecipientTypes.Individual) : Promise<V1.MessageResponse> {\r\n        assertPhone(phoneNumber)\r\n        assertNotNull(mediaId, 'parameter mediaId must not be empty')\r\n        return this.api.post(this.url, {\r\n            recipient_type: recipient_type,\r\n            to: phoneNumber,\r\n            type: \"document\",\r\n            document: {\r\n                id: mediaId,\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Send document by any url accessible from public zone of Internet\r\n     * @param phoneNumber phone number, for example '79001234567'\r\n     * @param link url\r\n     * @param caption title under document in WhatsApp\r\n     * @param recipient_type chat type. Can be individual or group\r\n     */\r\n    async sendDocumentByLink(phoneNumber: string, link : string, recipient_type : V1.RecipientTypes = V1.RecipientTypes.Individual) : Promise<V1.MessageResponse> {\r\n        assertPhone(phoneNumber)\r\n        assertNotNull(link, 'parameter link must not be empty')\r\n        return this.api.post(this.url, {\r\n            recipient_type: recipient_type,\r\n            to: phoneNumber,\r\n            type: \"document\",\r\n            document: {\r\n                link: link,\r\n            }\r\n        })\r\n    }\r\n}","import Api from './api';\r\nimport { assertNotNull } from './Validations';\r\nimport {V1} from './v1-types'\r\n\r\nexport class Media {\r\n\r\n    private readonly url = 'media' \r\n\r\n    constructor(private readonly api : Api) {}\r\n\r\n    /**\r\n     * Upload binary data (images, documents etc) to the server. After uploading you can send media to WhatsApp using id of the uploaded data \r\n     * @param data binary data to upload\r\n     * @param fileExtension extension of upladed data that will be assign to media message in WhatsApp.\r\n     */\r\n    async uploadMedia(data: Buffer, fileExtension : string) : Promise<string> {\r\n        assertNotNull(data, 'parameter data must not be empty')\r\n        assertNotNull(fileExtension, 'parameter fileExtension must not be empty')\r\n        if (fileExtension.startsWith('.')) {\r\n            fileExtension = fileExtension.slice(1)\r\n        }\r\n        const response = await this.api.postMedia(this.url, data, fileExtension) as V1.MediaResponse\r\n        return response.media[0].id\r\n    }\r\n}","import Api from './api';\r\nimport { assertNotNull, assertObjectNotEmpty } from './Validations';\r\nimport {V1} from './v1-types'\r\n\r\nexport class Broadcasts {\r\n\r\n    private readonly url = 'broadcast' \r\n\r\n    constructor(private readonly api : Api) {}\r\n\r\n    /**\r\n     * Send broadcast message to several phone numbers. There must be at least 2 receivers\r\n     * @param phoneNumbers array of phones, for example ['79001234567', '79001234568']\r\n     * @param text text message to send \r\n     * @param regPeriod filter by registration period for phones. Something like {\"from\": \"2020-01-01 00:00:00\", \"to\": \"2020-01-31 23:59:59\"}\r\n     * @param activePeriod filter for activity period for phones. Something like {\"from\": \"2020-01-01 00:00:00\", \"to\": \"2020-01-31 23:59:59\"}\r\n     * @param startAt date when to start broadcasting. If empty to begin immediately. Format like \"2020-01-01 00:00:00\" \r\n     */\r\n    async sendBroadcastTextMessage(phoneNumbers: Array<string>, text : string, \r\n        regPeriod?: PeriodFilter, activePeriod?: PeriodFilter, startAt? : string) : Promise<V1.MessageResponse> {\r\n\r\n        assertObjectNotEmpty(phoneNumbers, 'parameter phoneNumbers must not be empty')\r\n        assertNotNull(text, 'parameter text must not be empty')\r\n\r\n        const body : any = {\r\n            name: \"Broadcast from Green-API\",\r\n            to: this.toWaIds(phoneNumbers),\r\n            type: \"text\",\r\n            text: {\r\n                body: text\r\n            }\r\n        }\r\n\r\n        if (regPeriod) {\r\n            body.period = regPeriod\r\n        }\r\n\r\n        if (activePeriod) {\r\n            body.active = activePeriod\r\n        }\r\n\r\n        if (startAt) {\r\n            body.startAt = startAt\r\n        }\r\n\r\n        return this.api.post(this.url, body)\r\n    }\r\n\r\n    /**\r\n     * Send broadcast image to several phone numbers. There must be at least 2 receivers\r\n     * @param phoneNumbers array of phones, for example ['79001234567', '79001234568']\r\n     * @param mediaId id obtained from uploading image via method media.uploadMedia() \r\n     * @param caption title under image in WhatsApp\r\n     * @param regPeriod filter by registration period for phones. Something like {\"from\": \"2020-01-01 00:00:00\", \"to\": \"2020-01-31 23:59:59\"}\r\n     * @param activePeriod filter for activity period for phones. Something like {\"from\": \"2020-01-01 00:00:00\", \"to\": \"2020-01-31 23:59:59\"}\r\n     * @param startAt date when to start broadcasting. If empty to begin immediately. Format like \"2020-01-01 00:00:00\" \r\n     */\r\n    async sendBroadcastImageById(phoneNumbers: Array<string>, mediaId : string, caption? : string,\r\n        regPeriod?: PeriodFilter, activePeriod?: PeriodFilter, startAt? : string) : Promise<V1.MessageResponse> {\r\n\r\n        assertObjectNotEmpty(phoneNumbers, 'parameter phoneNumbers must not be empty')\r\n        assertNotNull(mediaId, 'parameter mediaId must not be empty')\r\n\r\n        const body : any = {\r\n            name: \"Broadcast from Green-API\",\r\n            to: this.toWaIds(phoneNumbers),\r\n            type:  \"image\",\r\n            image: {\r\n                id: mediaId,\r\n                caption: caption\r\n            }\r\n        }\r\n\r\n        if (regPeriod) {\r\n            body.period = regPeriod\r\n        }\r\n\r\n        if (activePeriod) {\r\n            body.active = activePeriod\r\n        }\r\n\r\n        \r\n        if (startAt) {\r\n            body.startAt = startAt\r\n        }\r\n\r\n        return this.api.post(this.url, body)\r\n    }\r\n\r\n    /**\r\n     * Send broadcast image to several phone numbers. There must be at least 2 receivers\r\n     * @param phoneNumbers array of phones, for example ['79001234567', '79001234568']\r\n     * @param link url\r\n     * @param caption title under image in WhatsApp\r\n     * @param regPeriod filter by registration period for phones. Something like {\"from\": \"2020-01-01 00:00:00\", \"to\": \"2020-01-31 23:59:59\"}\r\n     * @param activePeriod filter for activity period for phones. Something like {\"from\": \"2020-01-01 00:00:00\", \"to\": \"2020-01-31 23:59:59\"}\r\n     * @param startAt date when to start broadcasting. If empty to begin immediately. Format like \"2020-01-01 00:00:00\" \r\n     */\r\n    async sendBroadcastImageByLink(phoneNumbers: Array<string>, link : string, caption? : string,\r\n        regPeriod?: PeriodFilter, activePeriod?: PeriodFilter, startAt? : string) : Promise<V1.MessageResponse> {\r\n\r\n        assertObjectNotEmpty(phoneNumbers, 'parameter phoneNumbers must not be empty')\r\n        assertNotNull(link, 'parameter mediaId must not be empty')\r\n\r\n        const body : any = {\r\n            name: \"Broadcast from Green-API\",\r\n            to: this.toWaIds(phoneNumbers),\r\n            type:  \"image\",\r\n            image: {\r\n                link: link,\r\n                caption: caption\r\n            }\r\n        }\r\n\r\n        if (regPeriod) {\r\n            body.period = regPeriod\r\n        }\r\n\r\n        if (activePeriod) {\r\n            body.active = activePeriod\r\n        }\r\n\r\n        \r\n        if (startAt) {\r\n            body.startAt = startAt\r\n        }\r\n\r\n        return this.api.post(this.url, body)\r\n    }\r\n\r\n    /**\r\n     * Send broadcast video to several phone numbers. There must be at least 2 receivers\r\n     * @param phoneNumbers array of phones, for example ['79001234567', '79001234568']\r\n     * @param mediaId id obtained from uploading video via method media.uploadMedia() \r\n     * @param caption title under video in WhatsApp\r\n     * @param regPeriod filter by registration period for phones. Something like {\"from\": \"2020-01-01 00:00:00\", \"to\": \"2020-01-31 23:59:59\"}\r\n     * @param activePeriod filter for activity period for phones. Something like {\"from\": \"2020-01-01 00:00:00\", \"to\": \"2020-01-31 23:59:59\"}\r\n     * @param startAt date when to start broadcasting. If empty to begin immediately. Format like \"2020-01-01 00:00:00\" \r\n     */\r\n    async sendBroadcastVideoById(phoneNumbers: Array<string>, mediaId : string,\r\n        regPeriod?: PeriodFilter, activePeriod?: PeriodFilter, startAt? : string) : Promise<V1.MessageResponse> {\r\n\r\n        assertObjectNotEmpty(phoneNumbers, 'parameter phoneNumbers must not be empty')\r\n        assertNotNull(mediaId, 'parameter mediaId must not be empty')\r\n\r\n        const body : any = {\r\n            name: \"Broadcast from Green-API\",\r\n            to: this.toWaIds(phoneNumbers),\r\n            type:  \"video\",\r\n            video: {\r\n                id: mediaId\r\n            }\r\n        }\r\n\r\n        if (regPeriod) {\r\n            body.period = regPeriod\r\n        }\r\n\r\n        if (activePeriod) {\r\n            body.active = activePeriod\r\n        }\r\n\r\n        \r\n        if (startAt) {\r\n            body.startAt = startAt\r\n        }\r\n\r\n        return this.api.post(this.url, body)\r\n    }\r\n\r\n    /**\r\n     * Send broadcast video to several phone numbers. There must be at least 2 receivers\r\n     * @param phoneNumbers array of phones, for example ['79001234567', '79001234568']\r\n     * @param link url\r\n     * @param caption title under video in WhatsApp\r\n     * @param regPeriod filter by registration period for phones. Something like {\"from\": \"2020-01-01 00:00:00\", \"to\": \"2020-01-31 23:59:59\"}\r\n     * @param activePeriod filter for activity period for phones. Something like {\"from\": \"2020-01-01 00:00:00\", \"to\": \"2020-01-31 23:59:59\"}\r\n     * @param startAt date when to start broadcasting. If empty to begin immediately. Format like \"2020-01-01 00:00:00\" \r\n     */\r\n    async sendBroadcastVideoByLink(phoneNumbers: Array<string>, link : string,\r\n         regPeriod?: PeriodFilter, activePeriod?: PeriodFilter, startAt? : string) : Promise<V1.MessageResponse> {\r\n\r\n        assertObjectNotEmpty(phoneNumbers, 'parameter phoneNumbers must not be empty')\r\n        assertNotNull(link, 'parameter mediaId must not be empty')\r\n\r\n        const body : any = {\r\n            name: \"Broadcast from Green-API\",\r\n            to: this.toWaIds(phoneNumbers),\r\n            type:  \"video\",\r\n            video: {\r\n                link: link\r\n            }\r\n        }\r\n\r\n        if (regPeriod) {\r\n            body.period = regPeriod\r\n        }\r\n\r\n        if (activePeriod) {\r\n            body.active = activePeriod\r\n        }\r\n\r\n        \r\n        if (startAt) {\r\n            body.startAt = startAt\r\n        }\r\n\r\n        return this.api.post(this.url, body)\r\n    }\r\n\r\n    /**\r\n     * Send broadcast document to several phone numbers. There must be at least 2 receivers\r\n     * @param phoneNumbers array of phones, for example ['79001234567', '79001234568']\r\n     * @param mediaId id obtained from uploading document via method media.uploadMedia() \r\n     * @param caption title under document in WhatsApp\r\n     * @param regPeriod filter by registration period for phones. Something like {\"from\": \"2020-01-01 00:00:00\", \"to\": \"2020-01-31 23:59:59\"}\r\n     * @param activePeriod filter for activity period for phones. Something like {\"from\": \"2020-01-01 00:00:00\", \"to\": \"2020-01-31 23:59:59\"}\r\n     * @param startAt date when to start broadcasting. If empty to begin immediately. Format like \"2020-01-01 00:00:00\" \r\n     */\r\n    async sendBroadcastDocumentById(phoneNumbers: Array<string>, mediaId : string,\r\n        regPeriod?: PeriodFilter, activePeriod?: PeriodFilter, startAt? : string) : Promise<V1.MessageResponse> {\r\n\r\n        assertObjectNotEmpty(phoneNumbers, 'parameter phoneNumbers must not be empty')\r\n        assertNotNull(mediaId, 'parameter mediaId must not be empty')\r\n\r\n        const body : any = {\r\n            name: \"Broadcast from Green-API\",\r\n            to: this.toWaIds(phoneNumbers),\r\n            type:  \"document\",\r\n            document: {\r\n                id: mediaId\r\n            }\r\n        }\r\n\r\n        if (regPeriod) {\r\n            body.period = regPeriod\r\n        }\r\n\r\n        if (activePeriod) {\r\n            body.active = activePeriod\r\n        }\r\n\r\n        \r\n        if (startAt) {\r\n            body.startAt = startAt\r\n        }\r\n\r\n        return this.api.post(this.url, body)\r\n    }\r\n\r\n    /**\r\n     * Send broadcast document to several phone numbers. There must be at least 2 receivers\r\n     * @param phoneNumbers array of phones, for example ['79001234567', '79001234568']\r\n     * @param link url\r\n     * @param caption title under document in WhatsApp\r\n     * @param regPeriod filter by registration period for phones. Something like {\"from\": \"2020-01-01 00:00:00\", \"to\": \"2020-01-31 23:59:59\"}\r\n     * @param activePeriod filter for activity period for phones. Something like {\"from\": \"2020-01-01 00:00:00\", \"to\": \"2020-01-31 23:59:59\"}\r\n     * @param startAt date when to start broadcasting. If empty to begin immediately. Format like \"2020-01-01 00:00:00\" \r\n     */\r\n    async sendBroadcastDocumentByLink(phoneNumbers: Array<string>, link : string,\r\n         regPeriod?: PeriodFilter, activePeriod?: PeriodFilter, startAt? : string) : Promise<V1.MessageResponse> {\r\n\r\n        assertObjectNotEmpty(phoneNumbers, 'parameter phoneNumbers must not be empty')\r\n        assertNotNull(link, 'parameter mediaId must not be empty')\r\n\r\n        const body : any = {\r\n            name: \"Broadcast from Green-API\",\r\n            to: this.toWaIds(phoneNumbers),\r\n            type:  \"document\",\r\n            document: {\r\n                link: link\r\n            }\r\n        }\r\n\r\n        if (regPeriod) {\r\n            body.period = regPeriod\r\n        }\r\n\r\n        if (activePeriod) {\r\n            body.active = activePeriod\r\n        }\r\n\r\n        \r\n        if (startAt) {\r\n            body.startAt = startAt\r\n        }\r\n\r\n        return this.api.post(this.url, body)\r\n    }\r\n\r\n    /**\r\n     * Send broadcast audio to several phone numbers. There must be at least 2 receivers\r\n     * @param phoneNumbers array of phones, for example ['79001234567', '79001234568']\r\n     * @param mediaId id obtained from uploading audio via method media.uploadMedia() \r\n     * @param caption title under audio in WhatsApp\r\n     * @param regPeriod filter by registration period for phones. Something like {\"from\": \"2020-01-01 00:00:00\", \"to\": \"2020-01-31 23:59:59\"}\r\n     * @param activePeriod filter for activity period for phones. Something like {\"from\": \"2020-01-01 00:00:00\", \"to\": \"2020-01-31 23:59:59\"}\r\n     * @param startAt date when to start broadcasting. If empty to begin immediately. Format like \"2020-01-01 00:00:00\" \r\n     */\r\n    async sendBroadcastAudioById(phoneNumbers: Array<string>, mediaId : string,\r\n        regPeriod?: PeriodFilter, activePeriod?: PeriodFilter, startAt? : string) : Promise<V1.MessageResponse> {\r\n\r\n        assertObjectNotEmpty(phoneNumbers, 'parameter phoneNumbers must not be empty')\r\n        assertNotNull(mediaId, 'parameter mediaId must not be empty')\r\n\r\n        const body : any = {\r\n            name: \"Broadcast from Green-API\",\r\n            to: this.toWaIds(phoneNumbers),\r\n            type:  \"audio\",\r\n            audio: {\r\n                id: mediaId\r\n            }\r\n        }\r\n\r\n        if (regPeriod) {\r\n            body.period = regPeriod\r\n        }\r\n\r\n        if (activePeriod) {\r\n            body.active = activePeriod\r\n        }\r\n\r\n        \r\n        if (startAt) {\r\n            body.startAt = startAt\r\n        }\r\n\r\n        return this.api.post(this.url, body)\r\n    }\r\n\r\n    /**\r\n     * Send broadcast audio to several phone numbers. There must be at least 2 receivers\r\n     * @param phoneNumbers array of phones, for example ['79001234567', '79001234568']\r\n     * @param link url\r\n     * @param caption title under audio in WhatsApp\r\n     * @param regPeriod filter by registration period for phones. Something like {\"from\": \"2020-01-01 00:00:00\", \"to\": \"2020-01-31 23:59:59\"}\r\n     * @param activePeriod filter for activity period for phones. Something like {\"from\": \"2020-01-01 00:00:00\", \"to\": \"2020-01-31 23:59:59\"}\r\n     * @param startAt date when to start broadcasting. If empty to begin immediately. Format like \"2020-01-01 00:00:00\" \r\n     */\r\n    async sendBroadcastAudioByLink(phoneNumbers: Array<string>, link : string,\r\n         regPeriod?: PeriodFilter, activePeriod?: PeriodFilter, startAt? : string) : Promise<V1.MessageResponse> {\r\n\r\n        assertObjectNotEmpty(phoneNumbers, 'parameter phoneNumbers must not be empty')\r\n        assertNotNull(link, 'parameter mediaId must not be empty')\r\n\r\n        const body : any = {\r\n            name: \"Broadcast from Green-API\",\r\n            to: this.toWaIds(phoneNumbers),\r\n            type:  \"audio\",\r\n            audio: {\r\n                link: link\r\n            }\r\n        }\r\n\r\n        if (regPeriod) {\r\n            body.period = regPeriod\r\n        }\r\n\r\n        if (activePeriod) {\r\n            body.active = activePeriod\r\n        }\r\n\r\n        \r\n        if (startAt) {\r\n            body.startAt = startAt\r\n        }\r\n\r\n        return this.api.post(this.url, body)\r\n    }\r\n\r\n    private toWaIds(phoneNumbers: Array<string>) {\r\n        if (phoneNumbers.length < 2) {\r\n            throw new Error('There are not enough phones to send broadcast. Must be at least 2')\r\n        }\r\n        return phoneNumbers.map(phone => { return {wa_id: phone}})\r\n    }\r\n}\r\n\r\nexport interface PeriodFilter {\r\n    from: string,\r\n    to: string\r\n}","import Api from './api';\r\nimport {V1} from './v1-types'\r\n\r\nexport class Notifications {\r\n\r\n    private readonly url = 'notifications' \r\n\r\n    constructor(private readonly api : Api) {}\r\n\r\n    /**\r\n     * Notifications include data about incoming messages, statues, sent messges. \r\n     * After receving notification it have to be deleted with the method deleteNotification() in order to receive the next notification\r\n     * Inner implementation uses long polling. Every method invokes loop that waits 20 seconds for the next message. \r\n     * If no messages arrive then the loop ends with the empty response.\r\n     */\r\n    async receiveNotification() : Promise<V1.NotificationResponse> {\r\n        return this.api.get(this.url)\r\n    }\r\n\r\n    /**\r\n     * Delete notification for remote server using receiptId\r\n     * @param receiptId message id get coming from notification\r\n     */\r\n    async deleteNotification(receiptId: number) : Promise<any> {\r\n        return this.api.delete(`${this.url}/${receiptId}`)\r\n    }\r\n}","import Api, { Options } from './api';\nimport { Messages } from './messages'\nimport { Media } from './media';\nimport { Broadcasts } from './broadcasts';\nimport { Notifications } from './notifications';\n\nexport default class WhatsAppApi {\n    public readonly messages: Messages\n    public readonly media: Media\n    public readonly broadcasts: Broadcasts\n    public readonly notifications: Notifications\n\n    constructor(token: string, options?: Options) {\n        const api = new Api(token, options)\n        this.messages = new Messages(api)\n        this.media = new Media(api)\n        this.broadcasts = new Broadcasts(api)\n        this.notifications = new Notifications(api)\n    }\n}\n\nmodule.exports = Object.assign(WhatsAppApi, {\n    default: WhatsAppApi,\n})"],"names":["assertNumeric","val","errorMsg","isNumeric","Error","assertApiToken","assertNotNull","err","assertObjectNotEmpty","obj","isObjectEmpty","Object","keys","length","constructor","assertPhone","value","test","DEFAULT_OPTIONS","apiRoot","mediaRoot","Api","token","options","headers","get","url","response","axios","DEFAULT_AXIOS_CFG","data","ex","processError","delete","post","postMedia","ext","config","method","isAxiosError","JSON","stringify","V1","RecipientTypes","Messages","api","sendTextMessage","phoneNumber","text","to","type","body","sendTextMessageToGroup","chatId","recipient_type","sendImageById","mediaId","caption","Individual","image","id","sendImageByLink","link","sendVideoById","video","sendVideoByLink","sendAudioById","audio","sendAudioByLink","sendDocumentById","document","sendDocumentByLink","Media","uploadMedia","fileExtension","startsWith","slice","media","Broadcasts","sendBroadcastTextMessage","phoneNumbers","regPeriod","activePeriod","startAt","name","toWaIds","period","active","sendBroadcastImageById","sendBroadcastImageByLink","sendBroadcastVideoById","sendBroadcastVideoByLink","sendBroadcastDocumentById","sendBroadcastDocumentByLink","sendBroadcastAudioById","sendBroadcastAudioByLink","map","phone","wa_id","Notifications","receiveNotification","deleteNotification","receiptId","WhatsAppApi","messages","broadcasts","notifications","module","exports","assign","default"],"mappings":"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"}